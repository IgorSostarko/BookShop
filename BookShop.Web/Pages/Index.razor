@page "/"
@using BookShop.Web.Components
@using BookShop.Models;
@using BookShop.Web.Interfaces;
@using System.Globalization;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using Newtonsoft.Json;
@inject IProductService ProductService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject ICartService CartService

<div class="jumbotron jumbotron-fluid bg-secondary bg-opacity-10">
    <div class="container">
        <h1 class="display-4">Books</h1>
        <p class="lead">This is our selection of books.</p>
    </div>
</div>
@if (products is not null)
{
    <RadzenCard class="rz-mt-12" Variant="Variant.Text">
        <RadzenDataList PageSize="4" WrapItems="true" Data="@products" TItem="Product">
            <Template Context="product">
                <RadzenCard Class="rz-my-12 rz-mx-3" Style="max-width: 320px; margin-top:0!important">
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-p-4">
                        @if (product.Image is not null)
                        {
                            <div style="width:100px; height:100px; display:flex; align-items:center; align-content:center;">
                                <RadzenImage Path="@product.Image" Style="max-width:100px; max-height:100px; aspect-ratio:auto;" />
                            </div>
                        }
                        <RadzenStack Gap="0" Style="height:100px;">
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Title</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@product.Name</b></RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Author</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@product.Author</b></RadzenText>
                        </RadzenStack>
                    </RadzenStack>
                    <RadzenCard class="rz-background-color-primary-light rz-shadow-0 rz-border-radius-0 rz-p-8" style="margin: 1rem calc(-1 * var(--rz-card-padding));">
                        <RadzenRow RowGap="0">
                            <RadzenColumn SizeSM="6">
                                <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Category</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@product.Category.Name</b></RadzenText>
                            </RadzenColumn>
                            <RadzenColumn SizeSM="6">
                                <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Price</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b> @string.Format(hr,"{0:C}",product.Price)</b></RadzenText>
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenCard>
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0">
                        <RadzenButton Variant="Variant.Text" class="rz-text-secondary-color" Text="Info" Click="@(args=>GetDetails(product.Id))" />
                        <RadzenButton Variant="Variant.Text" Text="Add to cart" Click="@(args=>AddToCart(product.Id, product.Price))" />
                    </RadzenStack>
                </RadzenCard>
            </Template>
        </RadzenDataList>
    </RadzenCard>
}
else
{
    <RadzenStack AlignItems="AlignItems.Center" Class="rz-m-12">
        <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large">
            <Template>Loading...</Template>
        </RadzenProgressBarCircular>
    </RadzenStack>
}

@code {
    [CascadingParameter]
    public Task<AuthenticationState>? LogedIn { get; set; }
    CultureInfo hr = new CultureInfo("fr-FR");
    public List<Product>? products;
    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        products = await ProductService.GetProducts();
    }
    public void GetDetails(int id)
    {
        NavigationManager.NavigateTo($"/product/{id}");
    }
    public async void AddToCart(int id, decimal price, int quantity=1)
    {
        var user = await LogedIn;
        if (!user.User.Identity.IsAuthenticated)
        {
            var login = await DialogService.Alert($"You have to be loged in to add to cart!", "Not loged in!", new AlertOptions() { OkButtonText = "Log in" });
            if (login ?? false)
            {
                NavigationManager.NavigateTo("/login", true);
            }
        }
        else
        {
            var added = await CartService.AddToCart(new CartProductConnection() { Price=price, CartId=user.User.Identity.Name, ProductId=id, Quantity=quantity});
            if (added)
            {
                NotificationService.Notify(NotificationSeverity.Success, "Success", "Succesfuly added to cart!");
            }
        }
    }
}
