@page "/cart"
@page "/cart/{name}"
@using BookShop.Models;
@using BookShop.Web.Interfaces;
@using BookShop.Web.Services;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Authorization;
@using Radzen;
@using System.Globalization;
@attribute [Authorize(Roles = "Admin, Customer")]
@inject ICartService CartService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<style>
    .rz-col-12 {
        margin: auto;
    }
</style>

<div class="jumbotron jumbotron-fluid bg-secondary bg-opacity-10">
    <div class="container">
        <h1 class="display-4">Cart</h1>
        <p class="lead">This is cart of user @name.</p>
    </div>
</div>
@if (cartProducts is not null)
{
    <RadzenDataList AllowVirtualization=true Data="@cartProducts" TItem="CartProductConnection">
        <Template Context="item">
            <RadzenCard Variant="Variant.Text" Style="width: 100%; padding: 0;">
                <RadzenRow Gap="0">
                    <RadzenColumn Size="12" SizeMD="3" Class="rz-p-4 product-title">
                        <div style="width:fit-content; margin:auto;">
                            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-color-primary">@(item.Product.Name)</RadzenText>
                                @if (item.Product.Image is not null)
                            {
                                <div style="width:100px; height:100px; display:flex; align-items:center; align-content:center;">
                                    <RadzenImage Path="@item.Product.Image" Style="max-width:100px; max-height:100px; aspect-ratio:auto;" />
                                </div>
                            }
                        </div>
                        

                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="7" Class="rz-p-4">
                        <RadzenRow Gap="0">
                            <RadzenColumn Size="5" SizeMD="3">
                                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" Class="rz-mb-0">Author</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2">@(item.Product.Author)</RadzenText>

                                </RadzenColumn>

                                
                                <RadzenColumn Size="5" SizeMD="7">
                                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" Class="rz-mb-0">Price of one item</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2">@String.Format(new System.Globalization.CultureInfo("fr-FR"), "{0:C}", item.Price)</RadzenText>

                                </RadzenColumn>

                                <RadzenColumn Size="2" SizeMD="2" Class="rz-text-align-start rz-text-align-lg-end" Style="margin:auto;">
                                    <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Shade="Shade.Lighter" class="price-badge" Text=@($"{String.Format(new System.Globalization.CultureInfo("fr-FR"), "{0:C}", item.Price*item.Quantity)}") />
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="2" Class="rz-p-4">
                            <RadzenRow Gap="1" Style="margin:auto; width:fit-content;">
                                <RadzenButton Text="" Icon="remove" class="m-1" Click="@(()=>ChangeQuantity(item, item.Quantity-1))" />
                                <div style="margin-top:auto; margin-bottom:auto; font-size:1rem; font-weight:bold; color:darkred;">@item.Quantity</div>
                                <RadzenButton Text="" Icon="add" class="m-1" Click="@(()=>ChangeQuantity(item, item.Quantity+1))" />
                            </RadzenRow>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenCard>
                
            </Template>
        </RadzenDataList>
    @if (name == logedUserName)
    {
        <RadzenCard Variant="Variant.Text" Style="width:100%; padding:1rem">
            <RadzenRow>
                <RadzenColumn Size="12">
                    <div style="width:fit-content; margin-left:auto;">
                        <RadzenText TextStyle="TextStyle.H4">Total: <span style="color:mediumvioletred">@($"{String.Format(new System.Globalization.CultureInfo("fr-FR"), "{0:C}", cartProducts.Sum(a => a.Quantity * a.Price))}")</span></RadzenText>
                        <RadzenButton Text="Submit order" Icon="check" Style="width:fit-content; margin:auto;" />
                    </div>
                </RadzenColumn>
            </RadzenRow>
            
        </RadzenCard>
        }
}

@code {
    public List<CartProductConnection>? cartProducts = null;
    public AuthenticationState? state;
    [Parameter]
    public string? name { get; set; }
    public string logedUserName;
    protected async override Task OnInitializedAsync()
    {
        logedUserName = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User.Identity.Name;
        state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (state.User.IsInRole("Admin"))
        {
            name ??= logedUserName;
        }
        else
        {
            name = logedUserName;
        }
        cartProducts = await CartService.GetUserCart(name);
        await base.OnInitializedAsync();
    }
    public async Task ChangeQuantity(CartProductConnection connection, int quantity)
    {
        if (quantity > 0)
        {
            var added = await CartService.AddToCart(new CartProductConnection() { Price = connection.Price, CartId = name, ProductId = connection.ProductId, Quantity = quantity - connection.Quantity });
            connection.Quantity = quantity;
        }
        else if (quantity==0)
        {
            var added = await CartService.AddToCart(new CartProductConnection() { Price = connection.Price, CartId = name, ProductId = connection.ProductId, Quantity = quantity - connection.Quantity });
            cartProducts.Remove(connection);
        }
    }
}
